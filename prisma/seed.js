const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting seed...')

  // Create sample buildings
  const building1 = await prisma.building.create({
    data: {
      name: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A',
      code: 'A001',
      address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      totalFloors: 10,
      totalUnits: 40
    }
  })

  const building2 = await prisma.building.create({
    data: {
      name: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ B',
      code: 'B001',
      address: '456 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏µ‡∏•‡∏° ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      totalFloors: 8,
      totalUnits: 32
    }
  })

  console.log('‚úÖ Buildings created')

  // Create sample units
  const units = []
  for (let floor = 1; floor <= 5; floor++) {
    for (let unit = 1; unit <= 4; unit++) {
      const unitNumber = `${floor}${unit.toString().padStart(2, '0')}`
      units.push({
        buildingId: building1.id,
        unitNumber,
        floor,
        unitType: unit <= 2 ? 'one_br' : 'two_br',
        areaSqm: unit <= 2 ? 35.5 : 55.0,
        monthlyFee: unit <= 2 ? 3500 : 5500
      })
    }
  }

  await prisma.unit.createMany({
    data: units
  })

  console.log('‚úÖ Units created')

  // Create sample users
  const admin = await prisma.user.create({
    data: {
      username: 'admin',
      email: 'admin@condo.com',
      passwordHash: 'hashed_password_123', // In real app, use proper hashing
      firstName: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•',
      lastName: '‡∏£‡∏∞‡∏ö‡∏ö',
      phone: '02-123-4567',
      role: 'admin'
    }
  })

  const resident1 = await prisma.user.create({
    data: {
      username: 'john_doe',
      email: 'john@example.com',
      passwordHash: 'hashed_password_456',
      firstName: '‡∏à‡∏≠‡∏´‡πå‡∏ô',
      lastName: '‡πÇ‡∏î',
      phone: '08-1234-5678',
      role: 'resident'
    }
  })

  const resident2 = await prisma.user.create({
    data: {
      username: 'jane_smith',
      email: 'jane@example.com',
      passwordHash: 'hashed_password_789',
      firstName: '‡πÄ‡∏à‡∏ô',
      lastName: '‡∏™‡∏°‡∏¥‡∏ò',
      phone: '08-9876-5432',
      role: 'resident'
    }
  })

  console.log('‚úÖ Users created')

  // Create sample product categories
  const foodCategory = await prisma.productCategory.create({
    data: {
      name: 'Food & Beverages',
      nameTh: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
      icon: 'üçî',
      sortOrder: 1
    }
  })

  const dailyCategory = await prisma.productCategory.create({
    data: {
      name: 'Daily Necessities',
      nameTh: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
      icon: 'üß¥',
      sortOrder: 2
    }
  })

  console.log('‚úÖ Product categories created')

  // Create sample products
  await prisma.product.createMany({
    data: [
      {
        categoryId: foodCategory.id,
        name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á',
        description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏±‡∏Å‡∏™‡∏î',
        price: 120.00,
        stockQuantity: 50,
        unit: '‡∏à‡∏≤‡∏ô'
      },
      {
        categoryId: foodCategory.id,
        name: '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢',
        description: '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏ú‡πá‡∏î‡∏£‡πâ‡∏≠‡∏ô',
        price: 80.00,
        stockQuantity: 30,
        unit: '‡∏à‡∏≤‡∏ô'
      },
      {
        categoryId: dailyCategory.id,
        name: '‡∏ú‡∏á‡∏ã‡∏±‡∏Å‡∏ü‡∏≠‡∏Å',
        description: '‡∏ú‡∏á‡∏ã‡∏±‡∏Å‡∏ü‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß ‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡∏´‡∏≠‡∏°‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô',
        price: 45.00,
        stockQuantity: 100,
        unit: '‡∏ñ‡∏∏‡∏á'
      },
      {
        categoryId: dailyCategory.id,
        name: '‡πÅ‡∏ä‡∏°‡∏û‡∏π‡∏™‡∏£‡∏∞‡∏ú‡∏°',
        description: '‡πÅ‡∏ä‡∏°‡∏û‡∏π‡∏™‡∏£‡∏∞‡∏ú‡∏° ‡∏™‡∏π‡∏ï‡∏£‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô',
        price: 89.00,
        stockQuantity: 75,
        unit: '‡∏Ç‡∏ß‡∏î'
      }
    ]
  })

  console.log('‚úÖ Products created')

  // Create sample service categories
  await prisma.serviceCategory.createMany({
    data: [
      {
        name: 'Maintenance',
        nameTh: '‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á',
        icon: 'üîß',
        description: '‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤',
        isRepairService: true
      },
      {
        name: 'Cleaning',
        nameTh: '‡∏á‡∏≤‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
        icon: 'üßπ',
        description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î'
      },
      {
        name: 'Security',
        nameTh: '‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
        icon: 'üõ°Ô∏è',
        description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
      }
    ]
  })

  console.log('‚úÖ Service categories created')

  // Create sample facilities
  await prisma.facility.createMany({
    data: [
      {
        name: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° A',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 20 ‡∏Ñ‡∏ô',
        location: '‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A',
        capacity: 20,
        hourlyRate: 200.00,
        bookingAdvanceDays: 7,
        minBookingHours: 2,
        maxBookingHours: 8
      },
      {
        name: '‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥',
        description: '‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏Ç‡∏ô‡∏≤‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
        location: '‡∏ä‡∏±‡πâ‡∏ô G ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A',
        capacity: 50,
        hourlyRate: 0.00,
        bookingAdvanceDays: 3,
        minBookingHours: 1,
        maxBookingHours: 4
      },
      {
        name: '‡∏´‡πâ‡∏≠‡∏á‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô',
        location: '‡∏ä‡∏±‡πâ‡∏ô 3 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ B',
        capacity: 15,
        hourlyRate: 50.00,
        bookingAdvanceDays: 1,
        minBookingHours: 1,
        maxBookingHours: 3
      }
    ]
  })

  console.log('‚úÖ Facilities created')

  console.log('üéâ Seed completed successfully!')
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })